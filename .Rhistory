library(rcom)
install.packages("rcom")
library(rCUR)
install.packages("rCUR")
?plot
require(stats)#
plot(cars)#
lines(lowess(cars))#
#
plot(sin, -pi, 2*pi)
plot(table(rpois(100,5)), type = "h", col = "red", lwd=10,#
     main="rpois(100,lambda=5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")#
points(x, cex = .5, col = "dark red")
rbinom(100, 1, 0.5)
var(rbinom(100, 1, 0.5))
0.5 * (1-0.65)
0.5 * (1-0.5)
x <- -100:100
y <- x^3
plot(x,y)
plot(y, x)
y <- x^5
plot(y, x)
y <- x^1.5
plot(y, x)
y <- x^1/3
plot(y, x)
y <- x^(1/3)
plot(y, x)
y <- x^(-5)
plot(y, x)
y <- x^(3/2)
plot(y, x)
y <- sin(x)
plot(y, x)
plot(y, x, type="l")
x <- pi
pi
x <- (-2*pi):(2*pi)
y <- sin(x)
plot(y, x, type="l")
x <- (-2*pi):0.001:(2*pi)
x <- seq(-2*pi, 2*pi, by=0.0001)
plot(y, x, type="l")
y <- sin(x)
plot(y, x, type="l")
x <- seq(-3*pi, 2*pi, by=0.0001)
plot(y, x, type="l")
y <- sin(x)
plot(y, x, type="l")
x <- seq(-3*pi, pi, by=0.0001)
y <- sin(x)
plot(y, x, type="l")
x <- seq(-3*pi, pi/2, by=0.0001)
y <- sin(x)
plot(y, x, type="l")
x <- seq(-3*pi, pi/4, by=0.0001)
plot(y, x, type="l")
y <- sin(x)
plot(y, x, type="l")
x <- seq(-3*pi, pi/2, by=0.0001)
y <- sin(x)
plot(y, x, type="l")
x <- seq(-2*pi, pi/2, by=0.0001)
y <- sin(x)
plot(y, x, type="l")
x <- seq(-5/2*pi, pi/2, by=0.0001)
y <- sin(x)
plot(y, x, type="l")
x <- seq(-5/2*pi, pi/2, by=0.0001)#
y <- 1/2*sin(x)#
plot(y, x, type="l")
library(huge)
help(package="huge")
?huge
L = huge.generator(n = 200, d = 80, graph = "hub")#
#
#graph path estimation with input as a list#
out1 = huge(L)#
summary(out1)#
plot(out1)#
plot(out1, align = TRUE)#
huge.plot(out1$path[[3]])#
plot(out1$lambda,out1$sparsity)
out1
names(out)
names(out1)
out1$data
L
L$data
out1
names(out1)
out1$path
huge.plot(out1$path[[3]])
plot(out1, align = TRUE)
out2 = huge(L$data,method = "GECT")
out2
library(xtable)
help(package="xtable")
?xtable
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- paste(rootdir, "/Stata_Class/Tables_Figures/", sep="")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
#
## Demonstrate data.frame#
tli.table <- xtable(tli[1:20,])#
digits(tli.table)[c(2,6)] <- 0#
print(tli.table)#
print(tli.table,type="html")
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- paste(rootdir, "/Stata_Class/Tables_Figures/", sep="")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
#
## Demonstrate data.frame#
tli.table <- xtable(tli[1:20,])#
digits(tli.table)[c(2,6)] <- 0#
print(tli.table)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "/Stata_Class/Tables_Figures/")#
library(xtable)
resdir
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))
auto
auto$foreign
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto, auto$foreign, mean)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto[, c("foreign", "mpg", "price")], auto$foreign, mean)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto[, c("mpg", "price")], auto$foreign, mean)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto[, c("mpg", "price")], auto$foreign, function(x) return(mean(x), sd(x)))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto[, c("mpg", "price")], auto$foreign, function(x) return(c(mean(x), sd(x))))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))
tabstat
names(tabstat)
cbind(tabstat$Domestic, tabstat$Foreign)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)
auto$gpmw
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
#
mod_for <- lm(gpmw ~ foreign, data=auto)#
mod_for <- lm(gpmw ~ foreign + price, data=auto)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
#
mod_for <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- auto$foreign == "Foreign"
auto$Foreign
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- auto$foreign == "Foreign"#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
auto$Foreign
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
mod_ifor
mod_mult
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
cbind(mod_ifor$coeff, mod_mult$coeff)
mod_ifor$coeff
cbind(mod_for$coeff, mod_mult$coeff)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- mod_ifor$coeff#
co_ifor$coef <- rownames(co_ifor)
co_ifor
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- as.data.frame(mod_ifor$coeff)#
co_ifor$coef <- rownames(co_ifor)
co_ifor
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- as.data.frame(mod_ifor$coeff)#
co_ifor$coef <- rownames(co_ifor)#
#
co_mult <- as.data.frame(mod_mult$coeff)#
co_mult$coef <- rownames(co_mult)#
#
coeffs <- merge(co_ifor, co_mult, all=TRUE, by="coef")
coeffs
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
print(xtable(coeffs))
?print.xtable
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_for <- glm(foreign ~price + mpg, data=auto, family=binomial)
mod.for
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_for <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(mod_log$coeff)
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(exp(mod_log$coeff))
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(exp(summary(mod_log$coeff)))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame( summary(mod_log$coeff))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame( summary(mod_log))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  summary(mod_log)
co_log
co_log$coeff
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  summary(mod_log)$coeff
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log["(Intercept)",] <- NULL
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, ]
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]
co_log
xtable(co_log)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
co_log[,1] <- exp(co_log[,1])
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])
co_lgo
co_liog
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])#
#
xlog <- xtable(co_log, digits = c(3, 4))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])#
#
xlog <- xtable(co_log, digits = c(1, 3, 4))
xlog
?proper
?toupper
casefold("Price")
casefold("price")
?kruskal.test
require(graphics)#
boxplot(Ozone ~ Month, data = airquality)#
kruskal.test(Ozone ~ Month, data = airquality)
airquality
require(graphics)#
boxplot(Ozone ~ Month, data = airquality)#
kruskal.test(Ozone ~ Month + Wind, data = airquality)
require(graphics)#
boxplot(Ozone ~ Month, data = airquality)#
x <- kruskal.test(Ozone ~ Month + Wind, data = airquality)
x
names(x)
x$statistic
x$parameter
x$p.value
x$data.name
x$method
help(topic="kolmogorov")
??kolmogorov
?ks.test
x <- rnorm(50)#
y <- runif(30)#
# Do x and y come from the same distribution?#
ks.test(x, y)#
# Does x come from a shifted gamma distribution with shape 3 and rate 2?#
ks.test(x+2, "pgamma", 3, 2) # two-sided, exact#
ks.test(x+2, "pgamma", 3, 2, exact = FALSE)#
ks.test(x+2, "pgamma", 3, 2, alternative = "gr")#
#
# test if x is stochastically larger than x2#
x2 <- rnorm(50, -1)
x <- rnorm(50)#
y <- runif(30)
t.test(x, y)
wilcox.test(x, y)#
ks.test(x, y)
??kolmogorov
?ks.test
?kruskal.test
require(graphics)#
boxplot(Ozone ~ Month, data = airquality)
?t.test
t.test.formula
?t.test.formula
method("t.test.formula")
method.skeleton('t.test.formula')
?method
getS3method("t.test.formula")
t.test
UseMethod("t.test.formula")
UseMethod("t.test")
stats::t.test
stats:::t.test
stats:::t.test.formula
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#binary signal subgraph#
sig.sgraph <- function(graph, ylabels=NULL, corr=FALSE, upper=FALSE, alternative = "two.sided", keep=0.5, weight=FALSE, workspace=400000, ...){#
	#
	## taken from fisher.test <- check if alternative is in acceptable range#
	alternative <- char.expand(alternative, c("two.sided", "less", "greater"))#
	if (length(alternative) > 1L || is.na(alternative)) stop("alternative must be \"two.sided\", \"less\" or \"greater\"")#
	#
	dag <- dim(graph)#
	cg <- class(graph)#
	## see if data is stored as array#
	## if ylabels are a column in data.frame, then pull it out#
	if (cg == "data.frame" & ("ylabels" %in% colnames(graph)))#
		ylabels <- graph$ylabels	#
	if (cg == "matrix" && ("ylabels" %in% colnames(graph))) {#
		ylabels <- graph[,"ylabels"]#
		which.y <- which(colnames(graph) == "ylabels")#
		graph <- graph[,-which.y]#
	}#
	#
	# convert into correct format - rows are units/subjects, columns are nodes#
	graph <- convert.graph(graph)#
#
	## get levels of adjacencies#
	adj <- sort(unique(c(graph)))#
	nadj <- length(unique(c(graph)))#
	#
	if (nadj > 2 & !weight) {#
		print("Too many labels - graph is not in {0, 1}, running weighted version")#
		weight <- TRUE#
	}#
	#
	if (nadj == 2 & weight) {#
		print("Only two labels - using binary classifier")#
		weight <- FALSE#
	}#
	#
	## Get number of groups#
	ngroups <- length(unique(ylabels))#
	if (ngroups < 2) stop("Need at least 2 groups")#
	if (alternative != "two.sided" & ngroups > 2) {#
		print("For groups/labels > 2, alternative is two sided")#
		alternative <- "two.sided"#
	}#
#
	levs <- sort(unique(ylabels))#
	if (ngroups == 2) {#
		if (class(levs) == "character") ylabels <- as.numeric(factor(ylabels, levels=levs))-1#
		if (class(levs) == "factor") ylabels <- as.numeric(ylabels, levels=levs)-1#
		if (!all(as.numeric(levs)==c(0, 1))) stop("Label problems")#
	}#
	dg <- dim(graph)#
	## get number of subjects/vertices#
	nvert <- dg[2]#
	nsubj <- dg[1]#
	## rows are units/subjects, columns are vertices#
	if (length(dg) > 2) stop("Problem with dimensions")#
	#
	## get p.value for the graph vertices#
	pvals <- apply(graph, 2, function(x) getpvals(x, ylabels=ylabels, workspace=workspace, weight=weight))#
	#
	## keep percentage of the graph (need to CV it probably)#
	nkeep <- floor(nvert*keep.pct)#
	#
	## ssgraph: indices of the signal subgraph#
	ssgraph <- order(pvals)[1:nkeep]#
	#
	if (cg == "array") {#
		sig.graph <- matrix(0, nrow=dag[1], ncol=dag[2])#
		## make sure to put the ssgraph back in the right spot if upper is on#
		if (upper){#
			up.tri <- upper.tri(sig.graph)#
			sig.graph[up.tri][ssgraph] <- 1#
		} else sig.graph[ssgraph] <- 1#
	} else {#
		sig.graph <- rep(0, nvert)#
		sig.graph[ssgraph] <- 1#
	}#
	#
	## only need product over signal subgraph#
	## tgraph is total graph#
	tgraph <- graph#
	graph <- graph[, ssgraph]#
#
	if (corr) graph <- (graph+1)/2#
#
	res <- get.probs(graph=graph, weight=weight, corr=corr, ngroups=ngroups, ylabels=ylabels, levs=levs, nkeep=nkeep, nsubj= nsubj)#
	probs <- res$probs#
	priors <- res$priors#
	#
	## divide by total to get actual probability and not just numerator P(G = g | Y = y)#
	## apply(probs, 1, sum) = P(G=g|Y=1)P(Y=1)+ ... + P(G=g|Y=y_n)P(Y=y_n)#
	probs <- probs / apply(probs, 1, sum)#
	#
	preds <- apply(probs, 1, function(x) which(x == max(x)))#
	if (class(preds) != "integer") stop("Problem with Prediction")#
	preds <- levs[preds]#
	print(table(preds, ylabels))#
	print(mean(preds == ylabels))#
	#
	return(list(ssgraph=sig.graph, priors=priors, prob=probs, pred=preds, ylabels=ylabels))#
#
}#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylabels2 <- rbinom(1000, 1, 0.5)#
#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
x <- sig.sgraph(agraph, ylabels=ylabels)#
x <- sig.sgraph(agraph, ylabels=ylabels2)#
#
#
graph <- agraph <- array(runif(1000 * 100, min=-1, max=1), dim=c(10, 10, 1000))#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=TRUE, weight=TRUE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=TRUE, weight=TRUE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=TRUE, weight=FALSE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=TRUE, weight=FALSE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=FALSE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=FALSE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=FALSE, weight=TRUE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=FALSE, weight=TRUE)#
#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="great")#
#
graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
graph <- data.frame(cbind(graph, ylabels=ylabels))#
#
x <- sig.sgraph(graph)#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="great")#
#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
x <- sig.sgraph(agraph, ylabels=ylabels, workspace=10000000)#
x <- sig.sgraph(agraph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(agraph, ylabels=ylabels, alternative="great")#
#
#
ylabels <- c(rep(0, 100), rep(1, 100))#
mat0 <- matrix(runif(400, min=0, max=1), nrow=20)#
mat1 <- matrix(runif(400, min=0, max=1), nrow=20)#
#
p0 <- c(mat0)#
p1 <- c(mat1)#
#
graph0 <- sapply(p0, function(x) rbinom(100, 1, x))#
graph1 <- sapply(p1, function(x) rbinom(100, 1, x))#
#
graph <- data.frame(rbind(graph0, graph1))#
graph$ylabels <- ylabels#
x <- sig.sgraph(graph)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
#### Test data
setwd("~/Dropbox/CTR/Stewart/Signal_Subgraph/")
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
#### Test data
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#binary signal subgraph#
sig.sgraph <- function(graph, ylabels=NULL, corr=FALSE, upper=FALSE, alternative = "two.sided", keep=0.5, weight=FALSE, workspace=400000, ...){#
	#
	## taken from fisher.test <- check if alternative is in acceptable range#
	alternative <- char.expand(alternative, c("two.sided", "less", "greater"))#
	if (length(alternative) > 1L || is.na(alternative)) stop("alternative must be \"two.sided\", \"less\" or \"greater\"")#
	#
	dag <- dim(graph)#
	cg <- class(graph)#
	## see if data is stored as array#
	## if ylabels are a column in data.frame, then pull it out#
	if (cg == "data.frame" & ("ylabels" %in% colnames(graph)))#
		ylabels <- graph$ylabels	#
	if (cg == "matrix" && ("ylabels" %in% colnames(graph))) {#
		ylabels <- graph[,"ylabels"]#
		which.y <- which(colnames(graph) == "ylabels")#
		graph <- graph[,-which.y]#
	}#
	#
	# convert into correct format - rows are units/subjects, columns are nodes#
	graph <- convert.graph(graph)#
#
	## get levels of adjacencies#
	adj <- sort(unique(c(graph)))#
	nadj <- length(unique(c(graph)))#
	#
	if (nadj > 2 & !weight) {#
		print("Too many labels - graph is not in {0, 1}, running weighted version")#
		weight <- TRUE#
	}#
	#
	if (nadj == 2 & weight) {#
		print("Only two labels - using binary classifier")#
		weight <- FALSE#
	}#
	#
	## Get number of groups#
	ngroups <- length(unique(ylabels))#
	if (ngroups < 2) stop("Need at least 2 groups")#
	if (alternative != "two.sided" & ngroups > 2) {#
		print("For groups/labels > 2, alternative is two sided")#
		alternative <- "two.sided"#
	}#
#
	levs <- sort(unique(ylabels))#
	if (ngroups == 2) {#
		if (class(levs) == "character") ylabels <- as.numeric(factor(ylabels, levels=levs))-1#
		if (class(levs) == "factor") ylabels <- as.numeric(ylabels, levels=levs)-1#
		if (!all(as.numeric(levs)==c(0, 1))) stop("Label problems")#
	}#
	dg <- dim(graph)#
	## get number of subjects/vertices#
	nvert <- dg[2]#
	nsubj <- dg[1]#
	## rows are units/subjects, columns are vertices#
	if (length(dg) > 2) stop("Problem with dimensions")#
	#
	## get p.value for the graph vertices#
	pvals <- apply(graph, 2, function(x) getpvals(x, ylabels=ylabels, workspace=workspace, weight=weight))#
	#
	## keep percentage of the graph (need to CV it probably)#
	nkeep <- floor(nvert*keep.pct)#
	#
	## ssgraph: indices of the signal subgraph#
	ssgraph <- order(pvals)[1:nkeep]#
	#
	if (cg == "array") {#
		sig.graph <- matrix(0, nrow=dag[1], ncol=dag[2])#
		## make sure to put the ssgraph back in the right spot if upper is on#
		if (upper){#
			up.tri <- upper.tri(sig.graph)#
			sig.graph[up.tri][ssgraph] <- 1#
		} else sig.graph[ssgraph] <- 1#
	} else {#
		sig.graph <- rep(0, nvert)#
		sig.graph[ssgraph] <- 1#
	}#
	#
	## only need product over signal subgraph#
	## tgraph is total graph#
	tgraph <- graph#
	graph <- graph[, ssgraph]#
#
	if (corr) graph <- (graph+1)/2#
#
	res <- get.probs(graph=graph, weight=weight, corr=corr, ngroups=ngroups, ylabels=ylabels, levs=levs, nkeep=nkeep, nsubj= nsubj)#
	probs <- res$probs#
	priors <- res$priors#
	#
	## divide by total to get actual probability and not just numerator P(G = g | Y = y)#
	## apply(probs, 1, sum) = P(G=g|Y=1)P(Y=1)+ ... + P(G=g|Y=y_n)P(Y=y_n)#
	probs <- probs / apply(probs, 1, sum)#
	#
	preds <- apply(probs, 1, function(x) which(x == max(x)))#
	if (class(preds) != "integer") stop("Problem with Prediction")#
	preds <- levs[preds]#
	print(table(preds, ylabels))#
	print(mean(preds == ylabels))#
	#
	return(list(ssgraph=sig.graph, priors=priors, prob=probs, pred=preds, ylabels=ylabels))#
#
}
#
ylabels <- rbinom(1000, 5, 0.5)#
ylabels2 <- rbinom(1000, 1, 0.5)#
#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
x <- sig.sgraph(agraph, ylabels=ylabels)#
x <- sig.sgraph(agraph, ylabels=ylabels2)
#
graph <- agraph <- array(runif(1000 * 100, min=-1, max=1), dim=c(10, 10, 1000))#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=TRUE, weight=TRUE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=TRUE, weight=TRUE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=TRUE, weight=FALSE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=TRUE, weight=FALSE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=FALSE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=FALSE)#
#
x <- sig.sgraph(agraph, ylabels=ylabels, corr=FALSE, weight=TRUE)#
x <- sig.sgraph(agraph, ylabels=ylabels2, corr=FALSE, weight=TRUE)#
#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="great")#
#
graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
graph <- data.frame(cbind(graph, ylabels=ylabels))#
#
x <- sig.sgraph(graph)#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(graph, ylabels=ylabels, alternative="great")#
#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
x <- sig.sgraph(agraph, ylabels=ylabels, workspace=10000000)#
x <- sig.sgraph(agraph, ylabels=ylabels, alternative="less")#
x <- sig.sgraph(agraph, ylabels=ylabels, alternative="great")#
#
#
ylabels <- c(rep(0, 100), rep(1, 100))#
mat0 <- matrix(runif(400, min=0, max=1), nrow=20)#
mat1 <- matrix(runif(400, min=0, max=1), nrow=20)#
#
p0 <- c(mat0)#
p1 <- c(mat1)#
#
graph0 <- sapply(p0, function(x) rbinom(100, 1, x))#
graph1 <- sapply(p1, function(x) rbinom(100, 1, x))#
#
graph <- data.frame(rbind(graph0, graph1))#
graph$ylabels <- ylabels#
x <- sig.sgraph(graph)
graph
dim(graph)
graph$Age <- rnorm(200, mean= 20, sd=5)
graph$Age
stats:::t.test.formula
?kruskal.test
x <- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects#
y <- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease#
z <- c(2.8, 3.4, 3.7, 2.2, 2.0) # with asbestosis#
kruskal.test(list(x, y, z))
?ks.test
library(randomForest)
?randomForest
?randomForest.formula
randomForest.formula
randomForest::randomForest.formula
randomForest:::randomForest.formula
library(svm)
library(e1071)
e1071::svm.formula
e1071:::svm.formula
?svm
data(iris)#
attach(iris)#
#
## classification mode#
# default with factor response:#
model <- svm(Species ~ ., data = iris)
model
names(model)
model$SV
model
names(model)
?randomForest
library(rpart)
?rpart
fit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis)
fit
names(fit)
fit$splits
rownames(fit$splits)
unique(rownames(fit$splits))
randomForest.formula
?randomForest
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,#
                        proximity=TRUE)
iris.rf
names(iris.rf)
iris.rf$importance
?rpart
?rpart
?randomForest
