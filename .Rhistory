rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
#
mod_for <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- auto$foreign == "Foreign"
auto$Foreign
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- auto$foreign == "Foreign"#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
auto$Foreign
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)
mod_for
mod_ifor
mod_mult
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
cbind(mod_ifor$coeff, mod_mult$coeff)
mod_ifor$coeff
cbind(mod_for$coeff, mod_mult$coeff)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- mod_ifor$coeff#
co_ifor$coef <- rownames(co_ifor)
co_ifor
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- as.data.frame(mod_ifor$coeff)#
co_ifor$coef <- rownames(co_ifor)
co_ifor
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
### R wrap around effect#
co_ifor <- as.data.frame(mod_ifor$coeff)#
co_ifor$coef <- rownames(co_ifor)#
#
co_mult <- as.data.frame(mod_mult$coeff)#
co_mult$coef <- rownames(co_mult)#
#
coeffs <- merge(co_ifor, co_mult, all=TRUE, by="coef")
coeffs
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
print(xtable(coeffs))
?print.xtable
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_for <- glm(foreign ~price + mpg, data=auto, family=binomial)
mod.for
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_for <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))
mod_for
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(mod_log$coeff)
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(exp(mod_log$coeff))
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame(exp(summary(mod_log$coeff)))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame( summary(mod_log$coeff))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <- as.data.frame( summary(mod_log))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  summary(mod_log)
co_log
co_log$coeff
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  summary(mod_log)$coeff
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log["(Intercept)",] <- NULL
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, ]
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]
co_log
xtable(co_log)
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
co_log[,1] <- exp(co_log[,1])
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])
co_lgo
co_liog
co_log
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])#
#
xlog <- xtable(co_log, digits = c(3, 4))
rootdir <- "/Users/muschellij2/Dropbox/CTR"#
resdir <- file.path(rootdir, "Stata_Class/Tables_Figures/")#
library(xtable)#
#
#
### examples from xtable#
data(tli)#
auto <- read.csv(file=file.path(resdir, 'auto.csv'))#
#
#
tabstat <- by(auto[, c("mpg", "price")], auto$foreign, function(x) return(rbind(mean(x), sd(x))))#
#
cbind(tabstat$Domestic, tabstat$Foreign)#
rbind(tabstat$Domestic, tabstat$Foreign)#
#
#
auto$gpmw <- with(auto, ((1/mpg)/weight)*100*1000)#
auto$Foreign <- as.numeric(auto$foreign == "Foreign")#
#
mod_for <- lm(gpmw ~ Foreign, data=auto)#
mod_ifor <- lm(gpmw ~ foreign, data=auto)#
mod_mult <- lm(gpmw ~ foreign + price, data=auto)#
#
#
mod_log <- glm(foreign ~price + mpg, data=auto, family=binomial(link=))#
co_log <-  as.data.frame(summary(mod_log)$coeff)#
co_log <- co_log[2:3, c("Estimate", "Pr(>|z|)")]#
### Exponential#
co_log[,1] <- exp(co_log[,1])#
#
xlog <- xtable(co_log, digits = c(1, 3, 4))
xlog
?proper
?toupper
casefold("Price")
casefold("price")
load("/Users/muschellij2/Dropbox/CTR/DHanley/MISTIE/simulation/500.0.OR.results.61.rda")
ls
ls()
power.res
qt(0.025, 4692-4)
x <- abs(qt(0.025, 4692-4))
qt(0.975, 4692-4)
x <- qt(0.975, 4692-4)
pt(x, 4692-4, 2.48)
pt(x, 4692-4, 2.48, lower.tail=FALSE)
pt(x, 4692-4, 2.8, lower.tail=FALSE)
rm(list=ls())#
#
med.probs <- c(0.65, 0.70, 0.73, 0.75, NA)#
#shifts <- seq(0, 50, by=5)#
shifts <- c(0, 10, 25, 50)#
ns <- c(250, 300, 400, 500)#
scenarios <- expand.grid(shifts, med.probs, ns)
scenarios
setwd("~/SSgraph/")
ls
?formula
fo <- y ~ x1*x2
fo
names(fo)
attributes(fo)
?formula
terms(fo)
attr(fo, "variables")
attr(terms(fo), "variables")
?formula
all.vars(fo)
all.vars(fo)[1] <- "G"
all.vars(fo)[1]
all.vars(fo)[1] <- "g"
all.vars
all.names
stats:::all.names
base:::all.names
getS3method(all.names)
xnam <- paste("x", 1:25, sep="")#
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
fmla
fo
class(fo)
names(fo)
attr(fo)
attr(fo, "variables")
terms(fo)
attr(terms(fo), "variables")
all.vars
all.vars(fo)
?terms
terms.formula(fo)
fo
grep("y", fo)
grep("y")
fo
names(fo)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)#
#
#
ylabels[523] <- NA#
ylabels2 <- rbinom(1000, 1, 0.5)#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
x <- sig.sgraph(graph=agraph, y=ylabels)#
x <- sig.sgraph(agraph, y=ylabels, x=X)#
#
#
df$y[523] <- 1#
Q <- sig.sgraph.formula(formula=y ~ 1, data=df, graph=agraph)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)#
#
#
ylabels[523] <- NA#
ylabels2 <- rbinom(1000, 1, 0.5)#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
x <- sig.sgraph(graph=agraph, y=ylabels)#
x <- sig.sgraph(agraph, y=ylabels, x=X)#
#
#
df$y[523] <- 1#
Q <- sig.sgraph.formula(formula=y ~ 1, data=df, graph=agraph)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)#
#
#
ylabels[523] <- NA#
ylabels2 <- rbinom(1000, 1, 0.5)#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
x <- sig.sgraph(graph=agraph, y=ylabels)#
x <- sig.sgraph(agraph, y=ylabels, x=X)#
#
#
df$y[523] <- 1#
Q <- sig.sgraph.formula(formula=y ~ 1, data=df, graph=agraph)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
?call
?split
?strsplit
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylabels, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylab, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4")#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylab, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4"))#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylab, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4"))#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(cbind(y=ylab, X))#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
head(df)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4"))#
X <- matrix(rnorm(10*1000), nrow=1000)
ylab
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4"))#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(y=ylab, X)
df
head(df)
rm(list=ls())#
source("convert.graph.R")#
source("get.probs.R")#
source("sig.sgraph.formula.R")#
source("sig.sgraph.R")#
library(nnet)#
#### Test data#
graph <- agraph <- array(rbinom(1000 * 100, 1, prob=0.5), dim=c(10, 10, 1000))#
ylabels <- rbinom(1000, 5, 0.5)#
#graph <- t(apply(agraph, 3, function(x) return(x[upper.tri(x)])))#
#graph <- data.frame(cbind(graph, ylabels=ylabels))#
upper <- FALSE#
alternative = "two.sided"#
keep.pct=0.1#
weight <- TRUE#
corr <- FALSE#
workspace=400000#
#
#
#
ylabels <- rbinom(1000, 5, 0.5)#
ylab <- rep("Control", 1000)#
ylab[ylabels == 1] <- "ADHD1"#
ylab[ylabels == 2] <- "ADHD2"#
ylab[ylabels == 3] <- "ADHD3"#
ylab[ylabels == 4] <- "ADHD4"#
ylab <- factor(ylab, levels= c("Control", "ADHD1", "ADHD2", "ADHD3", "ADHD4"))#
X <- matrix(rnorm(10*1000), nrow=1000)#
#
df <- data.frame(y=ylab, X)#
Q <- sig.sgraph.formula(formula=y ~   1  , data=df, graph=agraph, keep=.4)
ncol(graph)
?dbeta
?glm
?dbeta
?glm
## Dobson (1990) Page 93: Randomized Controlled Trial :#
counts <- c(18,17,15,20,10,20,25,13,12)#
outcome <- gl(3,1,9)#
treatment <- gl(3,3)#
print(d.AD <- data.frame(treatment, outcome, counts))#
glm.D93 <- glm(counts ~ outcome + treatment, family=poisson())
glm.D93
summary(glm.D93)
names(summary(glm.D93))
names(glm.D93))
names(glm.D93)
glm.D93$linear.predictors
glm.D93$R
glm.D93$effects
library(MASS)
gamma.shape
MASS:::gamma.shape
getS3method(gamma.shape)
gamma.shape'
''
gamma.shape
gamma.shape()
UseMethod("gamma.shape")
getS3method("gamma.shape")
?getS3method("gamma.shape")
methods("gamma.shape")
gamma.shape.glm
MASS:::gamma.shape.glm
?glm
?rgamma
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)
x
y
glm(y ~ x, family=gamma)
glm(y ~ x, family=Gamma)
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ x, family=Gamma)
predict(mod)
var(predict(mod))
mean(predict(mod))
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ x, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ 1, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))#
#
mod <- glm(y ~ x, family=Gamma)
mean(y)
var(y)
var(y)/mean(y)
1/35
1/5
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ 1, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))
gamma.shape(mod)
gamma.dispersion(mod)
?gamma.dispersion
clotting <- data.frame(#
    u = c(5,10,15,20,30,40,60,80,100),#
    lot1 = c(118,58,42,35,27,25,21,19,18),#
    lot2 = c(69,35,26,21,18,16,13,12,12))#
clot1 <- glm(lot1 ~ log(u), data = clotting, family = Gamma)#
gamma.shape(clot1)#
#
gm <- glm(Days + 0.1 ~ Age*Eth*Sex*Lrn,#
          quasi(link=log, variance="mu^2"), quine,#
          start = c(3, rep(0,31)))#
gamma.shape(gm, verbose = TRUE)#
summary(gm, dispersion = gamma.dispersion(gm))  # better summary
?fitdistr
?fitdistr
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ 1, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))#
#
mod <- glm(y ~ x, family=Gamma)
predict(mod)
yhat <- predict(mod)
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ 1, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))#
#
mod <- glm(y ~ x, family=Gamma)#
yhat <- predict(mod)#
fitdistr(yhat, 'gamma')
yhat
y <- rgamma(1000, 10, rate = 1, scale = 1/5)#
x <- matrix(rnorm(1000*10), ncol=10)#
mod <- glm(y ~ 1, family=Gamma)#
#
var(predict(mod))#
mean(predict(mod))#
var(predict(mod))/mean(predict(mod))#
#
mod <- glm(y ~ x, family=Gamma)#
yhat <- predict(mod)#
fitdistr(yhat, 'gamma')
?Gamma
gf <- Gamma()#
gf#
str(gf)#
gf$linkinv
gf <- Gamma()#
gf#
str(gf)#
gf$link
gf <- Gamma()#
gf#
str(gf)#
gf$linkinv
fitdistr(yhat, 'poissson')
?fitdistr
fitdistr(yhat, 'poisson')
warnings
warnings()
?glm
counts <- c(18,17,15,20,10,20,25,13,12)#
outcome <- gl(3,1,9)#
treatment <- gl(3,3)#
print(d.AD <- data.frame(treatment, outcome, counts))#
glm.D93 <- glm(counts ~ outcome + treatment, family=poisson())
predict(glm.D93)
fitdstr(predict(glm.D93), "Poisson")
fitdistr(predict(glm.D93), "Poisson")
fitdistr(round(predict(glm.D93)), "Poisson")
?dbinom
dbinom(.5, 1, 0.5)
dpois()
?dbeta
x <- seq(0, 1, length=21)#
dbeta(x, 1, 1)#
pbeta(x, 1, 1)
x
mod <- glm(x ~ 1, family=beta)
library(gamlss.dist)
?gamlss.dist
?fitdstr
?fitdiustr
?fitdistr
x <- rgamma(100, shape = 5, rate = 0.1)#
fitdistr(x, "gamma")
x <- rgamma(100, shape = 5, rate = 0.1)
x <- rgamma(100, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
q <- fitdistr(x, "gamma")
q
names(q)
q$estimate
?dgamma
ests <- q$estimate
ests$shape
ests[1]
ests["shape"]
					ests <- fitdistr(Ghat, "gamma")#
					ests <- ests$estimate
Ghat <- x
					ests <- fitdistr(Ghat, "gamma")#
					ests <- ests$estimate
ests
					probs <- dgamma(graph, shape = ests["shape"], rate = ests["rate"])
probs
?apply
?family
beta()
